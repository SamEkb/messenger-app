version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - messenger-network

  # Kafka
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "user-events:1:1"
    depends_on:
      - zookeeper
    networks:
      - messenger-network

  # PostgreSQL
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports: [ "5432:5432" ]
    networks: [ messenger-network ]
    volumes:
      - pgdata:/var/lib/postgresql/data

  # Redis
  redis:
    image: redis:7
    container_name: redis
    ports: [ "6379:6379" ]
    networks: [ messenger-network ]

  # MongoDB
  mongo:
    image: mongo:7
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports: [ "27017:27017" ]
    networks: [ messenger-network ]
    volumes:
      - mongodata:/data/db

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8001:8001"
      - "9001:9001"
    environment:
      - PORT=8001
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=auth_db
      - REDIS_ADDR=redis:6379
    depends_on:
      - kafka
      - postgres
      - redis
    networks:
      - messenger-network
    restart: on-failure

  # Users Service
  users-service:
    build:
      context: ./users-service
      dockerfile: Dockerfile
    container_name: users-service
    ports:
      - "8004:8004"
      - "9004:9004"
    environment:
      - PORT=8004
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=users_db
      - REDIS_ADDR=redis:6379
    depends_on:
      - kafka
      - postgres
      - redis
    networks:
      - messenger-network
    restart: on-failure

  # Friends Service
  friends-service:
    build:
      context: ./friends-service
      dockerfile: Dockerfile
    container_name: friends-service
    ports:
      - "8003:8003"
      - "9003:9003"
    environment:
      - PORT=8003
      - USERS_SERVICE_ADDR=users-service:9004
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=friends_db
      - REDIS_ADDR=redis:6379
    depends_on:
      - users-service
      - postgres
      - redis
    networks:
      - messenger-network
    restart: on-failure

  # Chat Service
  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    container_name: chat-service
    ports:
      - "8002:8002"
      - "9002:9002"
    environment:
      - PORT=8002
      - USERS_SERVICE_ADDR=users-service:9004
      - FRIENDS_SERVICE_ADDR=friends-service:9003
      - MONGO_HOST=mongo
      - MONGO_USER=root
      - MONGO_PASSWORD=root
      - MONGO_DB=chat_db
      - REDIS_ADDR=redis:6379
    depends_on:
      - users-service
      - friends-service
      - mongo
      - redis
    networks:
      - messenger-network
    restart: on-failure

networks:
  messenger-network:
    driver: bridge

volumes:
  pgdata:
  mongodata: